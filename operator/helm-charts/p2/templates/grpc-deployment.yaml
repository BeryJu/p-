apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ include "p2.fullname" . }}-grpc
  labels:
    app.kubernetes.io/name: {{ include "p2.name" . }}
    helm.sh/chart: {{ include "p2.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    k8s.p2.io/deployment: grpc
spec:
  replicas: {{ .Values.deployment.grpcInstances }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "p2.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "p2.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        k8s.p2.io/component: grpc
      annotations:
        prometheus.io/scrape: "true"
        field.cattle.io/workloadMetrics: '[{"path":"/metrics","port":9102,"schema":"HTTP"}]'
    spec:
      securityContext:
        fsGroup: 100
      volumes:
        - name: media-storage
          persistentVolumeClaim:
            claimName: {{ include "p2.fullname" . }}-pvc-app-storage
      containers:
        - name: {{ .Chart.Name }}
          image: "docker.beryju.org/p2/server:{{ .Values.version }}"
          imagePullPolicy: IfNotPresent
          command:
            - ./manage.py
          args:
            - grpc
          ports:
            - name: grpc
              containerPort: 50051
              protocol: TCP
            - name: prometheus
              containerPort: 9102
              protocol: TCP
          envFrom:
            - configMapRef:
                name: {{ include "p2.fullname" . }}-config
              prefix: P2_
          env:
            - name: P2_REDIS__HOST
              value: "{{ .Release.Name }}-redis-master"
            - name: P2_REDIS__PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-redis"
                  key: redis-password
            - name: P2_POSTGRESQL__NAME
              value: "{{ .Values.postgresql.postgresqlDatabase }}"
            - name: P2_POSTGRESQL__USER
              value: "{{ .Values.postgresql.postgresqlUsername }}"
            - name: P2_POSTGRESQL__HOST
              value: "{{ .Release.Name }}-postgresql"
            - name: P2_POSTGRESQL__PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-postgresql"
                  key: postgresql-password
            - name: P2_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: "{{ template "p2.fullname" . }}"
                  key: secret_key
          volumeMounts:
            - mountPath: /storage
              name: media-storage
          resources:
            requests:
              cpu: 150m
              memory: 200M
            limits:
              cpu: 300m
              memory: 250M
